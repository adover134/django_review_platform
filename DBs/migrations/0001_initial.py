# Generated by Django 4.0.6 on 2022-08-28 14:34

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CommonInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commonInfoName', models.TextField()),
            ],
            options={
                'db_table': 'CommonInfo',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewTitle', models.CharField(max_length=50)),
                ('reviewDate', models.DateField(default=datetime.date.today)),
                ('reviewKind', models.IntegerField()),
                ('reviewSentence', models.JSONField()),
            ],
            options={
                'db_table': 'Review',
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('address', models.TextField()),
                ('builtYear', models.CharField(max_length=5, null=True)),
                ('commonInfo', models.JSONField(null=True)),
            ],
            options={
                'db_table': 'Room',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('uWarnCount', models.IntegerField(default=0)),
                ('uActive', models.IntegerField(default=0)),
                ('penaltyDate', models.DateField(default=datetime.date.today)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'user_info',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Manager',
            fields=[
                ('uId', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to=settings.AUTH_USER_MODEL)),
                ('mTel', models.TextField()),
            ],
            options={
                'db_table': 'manager',
            },
        ),
        migrations.CreateModel(
            name='RoomImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.TextField(null=True)),
                ('roomId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roomImage', to='DBs.room')),
            ],
            options={
                'db_table': 'RoomImage',
            },
        ),
        migrations.CreateModel(
            name='ReviewImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.TextField(null=True)),
                ('reviewId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='additionalImage', to='DBs.review')),
            ],
            options={
                'db_table': 'ReviewImage',
            },
        ),
        migrations.AddField(
            model_name='review',
            name='roomId',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='whichRoom', to='DBs.room'),
        ),
        migrations.AddField(
            model_name='review',
            name='uId',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='writer', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reportedOn', to='DBs.review')),
                ('uId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reporter', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Report',
            },
        ),
        migrations.CreateModel(
            name='Recommend',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reviewId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendedOn', to='DBs.review')),
                ('uId', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recommender', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'Recommend',
            },
        ),
        migrations.CreateModel(
            name='Icon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('iconKind', models.TextField()),
                ('changedIconKind', models.TextField()),
                ('iconInformation', models.TextField()),
                ('reviewId', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='includedIcon', to='DBs.review')),
            ],
            options={
                'db_table': 'Icon',
            },
        ),
    ]
